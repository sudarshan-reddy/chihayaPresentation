Trackers 
20 Jan 2017
Tags: go 

Sudarsan 

* Why torrents?

* Some popular users
- Facebook - Internal distribution of large binaries
- Blizzard - World of Warcraft / Starcraft updates are P2P
- Internet Archive - Wayback machine data is distributed through torrents
- Netflix - Working on a P2P streaming technology
- Microsoft - Windows 10 a bittorrent style P2P feature that can be turned on or off

: Netflix considering P2P(https://torrentfreak.com/netflix-needs-bittorrent-expert-to-implement-p2p-streaming-150520/)

* Bittorrent protocol

* General overview
- Torrent File
- Seeders
- Leechers
- Tracker
- Infohash
- Announce
- Scrape

* Client-Server vs P2P 
.image ./compare.jpg 400 550

* Role of trackers

* How trackers work
.image ./tracker.png

* Chihaya - Go based tracker library

* Who uses Chihaya in production?

- Facebook
In order to optimize the flow of traffic within their datacenters, Chihaya is configured to prefer peers within the same subnet.

- CoreOS
Quay is a container registry that offers the ability to download containers via BitTorrent in order to speed up large or geographically distant deployments.

* Why we picked Chihaya

- Performance
- Highly extensible
- Pluggable middleware feature

* Although...

- Stateless : In memory storage only
- Only way to scale is vertical

* Features we extended
- Added a configurable redis storage
- Replaced in memory garbage collection daemon with redis' built in key Expire feature
- Highly available and scalable(Horizontally)

- Sent a PR back to chihaya/chihaya. 

* How we store data

Every announce has a Peer ID, IP, Port, Type(Seeder or Leecher) and Infohash

We serialize the peer ID, IP and Port into a single value

Serialized peerKeys are pushed into a sorted set with time as scores and Infohash + type as key in O(logN)

Sorted sets have a ticking EXPIRE set to them and disappear if not refreshed(i.e announce not received)

During every announce, expired peerKeys are pruned and the remainder are reported to the announcer.

